// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ezhdanovskiy/wallets/internal/service (interfaces: Repository)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/repository_mock.go -package=mocks . Repository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	dto "github.com/ezhdanovskiy/wallets/internal/dto"
	sqlx "github.com/jmoiron/sqlx"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateWallet mocks base method.
func (m *MockRepository) CreateWallet(walletName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWallet", walletName)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateWallet indicates an expected call of CreateWallet.
func (mr *MockRepositoryMockRecorder) CreateWallet(walletName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWallet", reflect.TypeOf((*MockRepository)(nil).CreateWallet), walletName)
}

// GetOperations mocks base method.
func (m *MockRepository) GetOperations(arg0 dto.OperationsFilter) ([]dto.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperations", arg0)
	ret0, _ := ret[0].([]dto.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperations indicates an expected call of GetOperations.
func (mr *MockRepositoryMockRecorder) GetOperations(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperations", reflect.TypeOf((*MockRepository)(nil).GetOperations), arg0)
}

// GetWallet mocks base method.
func (m *MockRepository) GetWallet(walletName string) (*dto.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWallet", walletName)
	ret0, _ := ret[0].(*dto.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWallet indicates an expected call of GetWallet.
func (mr *MockRepositoryMockRecorder) GetWallet(walletName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWallet", reflect.TypeOf((*MockRepository)(nil).GetWallet), walletName)
}

// GetWalletsForUpdateTx mocks base method.
func (m *MockRepository) GetWalletsForUpdateTx(tx *sqlx.Tx, walletNames []string) ([]dto.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletsForUpdateTx", tx, walletNames)
	ret0, _ := ret[0].([]dto.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletsForUpdateTx indicates an expected call of GetWalletsForUpdateTx.
func (mr *MockRepositoryMockRecorder) GetWalletsForUpdateTx(tx, walletNames any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletsForUpdateTx", reflect.TypeOf((*MockRepository)(nil).GetWalletsForUpdateTx), tx, walletNames)
}

// IncreaseWalletBalance mocks base method.
func (m *MockRepository) IncreaseWalletBalance(walletName string, amount uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncreaseWalletBalance", walletName, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncreaseWalletBalance indicates an expected call of IncreaseWalletBalance.
func (mr *MockRepositoryMockRecorder) IncreaseWalletBalance(walletName, amount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncreaseWalletBalance", reflect.TypeOf((*MockRepository)(nil).IncreaseWalletBalance), walletName, amount)
}

// RunWithTransaction mocks base method.
func (m *MockRepository) RunWithTransaction(arg0 func(*sqlx.Tx) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunWithTransaction", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunWithTransaction indicates an expected call of RunWithTransaction.
func (mr *MockRepositoryMockRecorder) RunWithTransaction(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunWithTransaction", reflect.TypeOf((*MockRepository)(nil).RunWithTransaction), arg0)
}

// TransferTx mocks base method.
func (m *MockRepository) TransferTx(tx *sqlx.Tx, walletFrom, walletTo string, amount uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransferTx", tx, walletFrom, walletTo, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// TransferTx indicates an expected call of TransferTx.
func (mr *MockRepositoryMockRecorder) TransferTx(tx, walletFrom, walletTo, amount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferTx", reflect.TypeOf((*MockRepository)(nil).TransferTx), tx, walletFrom, walletTo, amount)
}
